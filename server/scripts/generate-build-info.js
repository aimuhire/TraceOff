#!/usr/bin/env node
/*
 Writes build metadata for the server to src/buildInfo.generated.ts so it can
 be bundled and read at runtime (including on Vercel serverless).
*/
const { execSync } = require('node:child_process');
const { writeFileSync } = require('node:fs');
const { join } = require('node:path');

function resolveCommit() {
  const envSha = process.env.VERCEL_GIT_COMMIT_SHA
    || process.env.GIT_COMMIT_SHA
    || process.env.COMMIT_SHA
    || process.env.GITHUB_SHA
    || '';
  if (envSha) return envSha.trim();
  try {
    const sha = execSync('git rev-parse HEAD', { stdio: ['ignore', 'pipe', 'ignore'] })
      .toString().trim();
    if (sha) return sha;
  } catch (_) {
    // ignore
  }
  return 'unknown';
}

function main() {
  const commit = resolveCommit();
  const short = commit && commit !== 'unknown' ? commit.substring(0, 7) : 'unknown';
  const builtAt = new Date().toISOString();

  const outPath = join(__dirname, '..', 'src', 'buildInfo.generated.ts');
  const contents = `// Auto-generated by scripts/generate-build-info.js\n` +
    `// Do not edit manually.\n` +
    `export const BUILD_INFO = {\n` +
    `  commit: ${JSON.stringify(commit)},\n` +
    `  short: ${JSON.stringify(short)},\n` +
    `  builtAt: ${JSON.stringify(builtAt)},\n` +
    `};\n`;

  writeFileSync(outPath, contents, 'utf8');
  console.log(`Wrote build info to ${outPath}: ${commit} (${short})`);
}

main();

