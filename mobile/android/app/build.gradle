plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}
 

def keystorePropertiesFile = rootProject.file('key.properties')
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}
def keystorePathProp = keystoreProperties.getProperty('storeFile')
def storeTypeProp = keystoreProperties.getProperty('storeType')
def resolvedKeystoreFile = keystorePathProp ? file(keystorePathProp) : null
def hasReleaseKeystore = keystorePropertiesFile.exists() && resolvedKeystoreFile != null && resolvedKeystoreFile.exists()

android {
    namespace "com.aimuhire.traceoff"
    compileSdk 36
    ndkVersion flutter.ndkVersion

    defaultConfig {
        applicationId "com.aimuhire.traceoff"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion 36
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    sourceSets {
        main {
            java.srcDirs += "src/main/kotlin"
            // Include shared icon resources from repo-level resources/android/res
            // so they override default launcher icons across densities.
            res.srcDirs = [
                "../../../resources/android/res",
                "src/main/res",
            ]
        }
    }

    signingConfigs {
        release {
            if (!hasReleaseKeystore) {
                // Fail fast for release builds so we never produce a debug-signed artifact by mistake
                throw new GradleException(
                    "Release keystore not found. Configure mobile/android/key.properties and place the keystore at 'mobile/android/app/" +
                    (keystorePathProp ?: "upload-keystore.jks") + "'.\n" +
                    "See mobile/android/key.properties.example for the required fields.")
            }
            if (storeTypeProp != null && storeTypeProp.trim()) {
                // Allow overriding store type, e.g., PKCS12
                storeType storeTypeProp.trim()
            }
            storeFile resolvedKeystoreFile
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    buildTypes {
        release {
            // Always use release signing; the signingConfigs.release block will throw with a helpful message if misconfigured
            signingConfig signingConfigs.release
            // Enable shrinking/obfuscation to reduce size and produce a mapping.txt for Play Console
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

 
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:2.1.0"
}
